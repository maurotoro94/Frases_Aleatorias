{"version":3,"sources":["components/Quotes.js","App.js","reportWebVitals.js","index.js"],"names":["Quotes","useState","quote","setQuote","author","setAuthor","useEffect","getQuote","fetch","then","res","json","data","dataQuotes","quotes","randomQuote","Math","floor","random","length","id","onClick","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMA4CiBA,EAxCF,WACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAW,WAEfC,MADO,iEAEJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAIC,EAAaD,EAAKE,OAElBC,EAAcF,EADFG,KAAKC,MAAMD,KAAKE,SAAWL,EAAWM,SAGtDhB,EAASY,EAAYb,OACrBG,EAAUU,EAAYX,YAQ5B,OACE,sBAAKgB,GAAG,YAAR,UAEE,qBAAKA,GAAG,OAAR,SAAe,4BAAIlB,MAEnB,qBAAKkB,GAAG,SAAR,SAAiB,4BAAIhB,MAErB,qBAAKgB,GAAG,UAAR,SACE,wBAAQC,QAZM,WAClBd,KAWkCa,GAAG,YAAjC,+B,MC1BKE,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d45e14bf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\nconst Quotes = () => {\r\n    const [quote, setQuote] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n  \r\n    useEffect(() => {\r\n      getQuote()\r\n    }, []);\r\n  \r\n    const getQuote = () => {\r\n      let url = `https://my-json-server.typicode.com/maurotoro94/Api_frases/db`;\r\n      fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          let dataQuotes = data.quotes;\r\n          let randomNum = Math.floor(Math.random() * dataQuotes.length);\r\n          let randomQuote = dataQuotes[randomNum];\r\n  \r\n          setQuote(randomQuote.quote);\r\n          setAuthor(randomQuote.author);\r\n        })\r\n    }\r\n  \r\n    const handleClick = () => {\r\n      getQuote();\r\n    }\r\n  \r\n    return (\r\n      <div id=\"quote-box\">\r\n\r\n        <div id=\"text\"><p>{quote}</p></div>\r\n\r\n        <div id=\"author\"><p>{author}</p></div>\r\n  \r\n        <div id=\"buttons\">\r\n          <button onClick={handleClick} id=\"new-quote\">Nueva Frase</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default Quotes;","import React from 'react';\nimport Quotes from './components/Quotes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quotes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}